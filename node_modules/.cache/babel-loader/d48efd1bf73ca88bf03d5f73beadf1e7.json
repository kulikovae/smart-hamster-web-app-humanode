{"ast":null,"code":"//react-geolocate\nimport { useState, useEffect } from \"react\";\n\nconst useGeoLocation = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [country, setCountry] = useState(options.country);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const api = options.api || \"https://api.country.is\";\n  useEffect(() => {\n    let isCancelled = false;\n    if (country || country === false) return;\n\n    async function fetchAPI() {\n      setIsLoading(true);\n      await fetch(api).then(res => {\n        if (!res.ok) {\n          throw Error(res.statusText);\n          return null;\n        }\n\n        return res.json();\n      }).then(res => {\n        if (res && res.country && !isCancelled) setCountry(res.country);\n      }).catch(err => setError(err)).finally(() => setIsLoading(false));\n    }\n\n    fetchAPI();\n    return () => {\n      isCancelled = true;\n    };\n  }, []);\n  return {\n    country,\n    error,\n    isLoading\n  };\n};\n\nexport default useGeoLocation;","map":{"version":3,"names":["useState","useEffect","useGeoLocation","options","country","setCountry","error","setError","isLoading","setIsLoading","api","isCancelled","fetchAPI","fetch","then","res","ok","Error","statusText","json","catch","err","finally"],"sources":["/Users/loyanix/projects/frontend/smart-hamster-web-app/node_modules/react-ipgeolocation/index.js"],"sourcesContent":["//react-geolocate\n\nimport { useState, useEffect } from \"react\";\n\nconst useGeoLocation = (options = {}) => {\n  const [country, setCountry] = useState(options.country);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const api = options.api || \"https://api.country.is\";\n\n  useEffect(() => {\n    let isCancelled = false;\n\n    if (country || country === false) return;\n    async function fetchAPI() {\n      setIsLoading(true);\n      await fetch(api)\n        .then(res => {\n          if (!res.ok) {\n            throw Error(res.statusText);\n            return null;\n          }\n          return res.json();\n        })\n        .then(res => {\n          if (res && res.country && !isCancelled) setCountry(res.country);\n        })\n        .catch(err => setError(err))\n        .finally(() => setIsLoading(false));\n    }\n    fetchAPI();\n    return () => {\n      isCancelled = true;\n    };\n  }, []);\n\n  return { country, error, isLoading };\n};\n\nexport default useGeoLocation;\n"],"mappings":"AAAA;AAEA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,cAAc,GAAG,YAAkB;EAAA,IAAjBC,OAAiB,uEAAP,EAAO;EACvC,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAACG,OAAO,CAACC,OAAT,CAAtC;EACA,MAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,KAAD,CAAlC;EACA,MAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAMU,GAAG,GAAGP,OAAO,CAACO,GAAR,IAAe,wBAA3B;EAEAT,SAAS,CAAC,MAAM;IACd,IAAIU,WAAW,GAAG,KAAlB;IAEA,IAAIP,OAAO,IAAIA,OAAO,KAAK,KAA3B,EAAkC;;IAClC,eAAeQ,QAAf,GAA0B;MACxBH,YAAY,CAAC,IAAD,CAAZ;MACA,MAAMI,KAAK,CAACH,GAAD,CAAL,CACHI,IADG,CACEC,GAAG,IAAI;QACX,IAAI,CAACA,GAAG,CAACC,EAAT,EAAa;UACX,MAAMC,KAAK,CAACF,GAAG,CAACG,UAAL,CAAX;UACA,OAAO,IAAP;QACD;;QACD,OAAOH,GAAG,CAACI,IAAJ,EAAP;MACD,CAPG,EAQHL,IARG,CAQEC,GAAG,IAAI;QACX,IAAIA,GAAG,IAAIA,GAAG,CAACX,OAAX,IAAsB,CAACO,WAA3B,EAAwCN,UAAU,CAACU,GAAG,CAACX,OAAL,CAAV;MACzC,CAVG,EAWHgB,KAXG,CAWGC,GAAG,IAAId,QAAQ,CAACc,GAAD,CAXlB,EAYHC,OAZG,CAYK,MAAMb,YAAY,CAAC,KAAD,CAZvB,CAAN;IAaD;;IACDG,QAAQ;IACR,OAAO,MAAM;MACXD,WAAW,GAAG,IAAd;IACD,CAFD;EAGD,CAxBQ,EAwBN,EAxBM,CAAT;EA0BA,OAAO;IAAEP,OAAF;IAAWE,KAAX;IAAkBE;EAAlB,CAAP;AACD,CAjCD;;AAmCA,eAAeN,cAAf"},"metadata":{},"sourceType":"module"}