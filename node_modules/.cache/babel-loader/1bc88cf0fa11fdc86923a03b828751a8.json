{"ast":null,"code":"let account;\nconst chainId = '0x38'; // binance Mainnet\n\nexport function isMetamaskPresent() {\n  return typeof window.ethereum === 'undefined';\n}\nexport function connectWallet() {\n  ethereum.request({\n    method: 'eth_requestAccounts'\n  }).then(accounts => {\n    account = accounts[0];\n    console.log(account);\n    console.log('Chain id ' + window.ethereum.networkVersion);\n\n    if (window.ethereum.networkVersion !== chainId) {\n      try {\n        window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: chainId\n          }]\n        });\n        return true;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  });\n}\nexport function makePayment(sessionPrice) {\n  let actualPrice = sessionPrice * 10 ** 18;\n  let priceInHex = '0x' + actualPrice.toString(16);\n  console.log(priceInHex);\n  let transactionParam = {\n    to: '0x55d398326f99059fF775485246999027B3197955',\n    gas: '0x11170',\n    from: account,\n    data: getDataFieldValue('0xa5C4fA6DD27cB11b63633c98Bda3E6F079b26c67', priceInHex)\n  };\n  ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParam]\n  }).then(txhash => {\n    return txhash;\n  });\n}\n\nfunction getDataFieldValue(tokenRecipientAddress, tokenAmount) {\n  const web3 = new Web3();\n  const TRANSFER_FUNCTION_ABI = {\n    constant: false,\n    inputs: [{\n      internalType: 'address',\n      name: 'recipient',\n      type: 'address'\n    }, {\n      internalType: 'uint256',\n      name: 'amount',\n      type: 'uint256'\n    }],\n    name: 'transfer',\n    outputs: [{\n      internalType: 'bool',\n      name: '',\n      type: 'bool'\n    }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  };\n  return web3.eth.abi.encodeFunctionCall(TRANSFER_FUNCTION_ABI, [tokenRecipientAddress, tokenAmount]);\n}","map":{"version":3,"names":["account","chainId","isMetamaskPresent","window","ethereum","connectWallet","request","method","then","accounts","console","log","networkVersion","params","err","makePayment","sessionPrice","actualPrice","priceInHex","toString","transactionParam","to","gas","from","data","getDataFieldValue","txhash","tokenRecipientAddress","tokenAmount","web3","Web3","TRANSFER_FUNCTION_ABI","constant","inputs","internalType","name","type","outputs","payable","stateMutability","eth","abi","encodeFunctionCall"],"sources":["/Users/loyanix/projects/smart-hamster-web-app/src/utils/metamask.js"],"sourcesContent":["let account;\nconst chainId = '0x38'; // binance Mainnet\n\nexport function isMetamaskPresent() {\n  return typeof window.ethereum === 'undefined';\n}\n\nexport function connectWallet() {\n  ethereum.request({ method: 'eth_requestAccounts' }).then((accounts) => {\n    account = accounts[0];\n    console.log(account);\n\n    console.log('Chain id ' + window.ethereum.networkVersion);\n\n    if (window.ethereum.networkVersion !== chainId) {\n      try {\n        window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: chainId }],\n        });\n        return true;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  });\n}\n\nexport function makePayment(sessionPrice) {\n  let actualPrice = sessionPrice * 10 ** 18;\n  let priceInHex = '0x' + actualPrice.toString(16);\n\n  console.log(priceInHex);\n\n  let transactionParam = {\n    to: '0x55d398326f99059fF775485246999027B3197955',\n    gas: '0x11170',\n    from: account,\n    data: getDataFieldValue('0xa5C4fA6DD27cB11b63633c98Bda3E6F079b26c67', priceInHex),\n  };\n\n  ethereum\n    .request({\n      method: 'eth_sendTransaction',\n      params: [transactionParam],\n    })\n    .then((txhash) => {\n      return txhash;\n    });\n}\n\nfunction getDataFieldValue(tokenRecipientAddress, tokenAmount) {\n  const web3 = new Web3();\n  const TRANSFER_FUNCTION_ABI = {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'recipient', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'transfer',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  };\n  return web3.eth.abi.encodeFunctionCall(TRANSFER_FUNCTION_ABI, [\n    tokenRecipientAddress,\n    tokenAmount,\n  ]);\n}\n"],"mappings":"AAAA,IAAIA,OAAJ;AACA,MAAMC,OAAO,GAAG,MAAhB,C,CAAwB;;AAExB,OAAO,SAASC,iBAAT,GAA6B;EAClC,OAAO,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAAlC;AACD;AAED,OAAO,SAASC,aAAT,GAAyB;EAC9BD,QAAQ,CAACE,OAAT,CAAiB;IAAEC,MAAM,EAAE;EAAV,CAAjB,EAAoDC,IAApD,CAA0DC,QAAD,IAAc;IACrET,OAAO,GAAGS,QAAQ,CAAC,CAAD,CAAlB;IACAC,OAAO,CAACC,GAAR,CAAYX,OAAZ;IAEAU,OAAO,CAACC,GAAR,CAAY,cAAcR,MAAM,CAACC,QAAP,CAAgBQ,cAA1C;;IAEA,IAAIT,MAAM,CAACC,QAAP,CAAgBQ,cAAhB,KAAmCX,OAAvC,EAAgD;MAC9C,IAAI;QACFE,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;UACtBC,MAAM,EAAE,4BADc;UAEtBM,MAAM,EAAE,CAAC;YAAEZ,OAAO,EAAEA;UAAX,CAAD;QAFc,CAAxB;QAIA,OAAO,IAAP;MACD,CAND,CAME,OAAOa,GAAP,EAAY;QACZJ,OAAO,CAACC,GAAR,CAAYG,GAAZ;MACD;IACF;EACF,CAjBD;AAkBD;AAED,OAAO,SAASC,WAAT,CAAqBC,YAArB,EAAmC;EACxC,IAAIC,WAAW,GAAGD,YAAY,GAAG,MAAM,EAAvC;EACA,IAAIE,UAAU,GAAG,OAAOD,WAAW,CAACE,QAAZ,CAAqB,EAArB,CAAxB;EAEAT,OAAO,CAACC,GAAR,CAAYO,UAAZ;EAEA,IAAIE,gBAAgB,GAAG;IACrBC,EAAE,EAAE,4CADiB;IAErBC,GAAG,EAAE,SAFgB;IAGrBC,IAAI,EAAEvB,OAHe;IAIrBwB,IAAI,EAAEC,iBAAiB,CAAC,4CAAD,EAA+CP,UAA/C;EAJF,CAAvB;EAOAd,QAAQ,CACLE,OADH,CACW;IACPC,MAAM,EAAE,qBADD;IAEPM,MAAM,EAAE,CAACO,gBAAD;EAFD,CADX,EAKGZ,IALH,CAKSkB,MAAD,IAAY;IAChB,OAAOA,MAAP;EACD,CAPH;AAQD;;AAED,SAASD,iBAAT,CAA2BE,qBAA3B,EAAkDC,WAAlD,EAA+D;EAC7D,MAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;EACA,MAAMC,qBAAqB,GAAG;IAC5BC,QAAQ,EAAE,KADkB;IAE5BC,MAAM,EAAE,CACN;MAAEC,YAAY,EAAE,SAAhB;MAA2BC,IAAI,EAAE,WAAjC;MAA8CC,IAAI,EAAE;IAApD,CADM,EAEN;MAAEF,YAAY,EAAE,SAAhB;MAA2BC,IAAI,EAAE,QAAjC;MAA2CC,IAAI,EAAE;IAAjD,CAFM,CAFoB;IAM5BD,IAAI,EAAE,UANsB;IAO5BE,OAAO,EAAE,CAAC;MAAEH,YAAY,EAAE,MAAhB;MAAwBC,IAAI,EAAE,EAA9B;MAAkCC,IAAI,EAAE;IAAxC,CAAD,CAPmB;IAQ5BE,OAAO,EAAE,KARmB;IAS5BC,eAAe,EAAE,YATW;IAU5BH,IAAI,EAAE;EAVsB,CAA9B;EAYA,OAAOP,IAAI,CAACW,GAAL,CAASC,GAAT,CAAaC,kBAAb,CAAgCX,qBAAhC,EAAuD,CAC5DJ,qBAD4D,EAE5DC,WAF4D,CAAvD,CAAP;AAID"},"metadata":{},"sourceType":"module"}