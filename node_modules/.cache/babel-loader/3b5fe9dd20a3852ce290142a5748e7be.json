{"ast":null,"code":"module.exports = {\n  //TOKENS\n  createToken(createTokenParams) {\n    const {\n      name,\n      scopes,\n      domain_id\n    } = createTokenParams;\n    const scopesArray = [\"email_full\", \"domains_read\", \"domains_full\", \"activity_read\", \"activity_full\", \"analytics_read\", \"analytics_full\", \"tokens_full\"]; //Check for required values name and scopes\n\n    if (!name || !scopes || !domain_id) {\n      err = new Error(\"Please include a name, domain_id and scopes in your request\");\n      throw err;\n    } //Check if scopes have values\n\n\n    if (scopes.length < 1) {\n      throw new Error(\"You need to add at least 1 scope\");\n    } //Check if all values in scopes array are valid.\n\n\n    for (let i = 0; i < scopes.length; i++) {\n      const scope = scopes[i];\n\n      if (!scopesArray.includes(scope)) {\n        throw new Error(`\"${scope}\" is not a valid value for scopes`);\n      }\n    } //Check if name value is not bigger than 191 characters\n\n\n    if (name.length > 191) {\n      throw new Error(\"Token name has to be less than 191 characters\");\n    }\n\n    return this.request(\"/token\", {\n      method: \"POST\",\n      body: createTokenParams\n    });\n  },\n\n  updateToken(updateTokenParams) {\n    const {\n      token_id,\n      status\n    } = updateTokenParams;\n\n    if (!token_id) {\n      throw new Error(\"Please provide a valid token_id\");\n    }\n\n    if (!['pause', 'unpause'].includes(status)) {\n      throw new Error(\"Please provide a valid status\");\n    }\n\n    return this.request(`/token/${token_id}/settings`, {\n      method: \"PUT\",\n      body: {\n        status: status\n      }\n    });\n  },\n\n  deleteToken(deleteTokenParams) {\n    const {\n      token_id\n    } = deleteTokenParams; //Check if token_id was provided\n\n    if (!token_id) {\n      throw new Error(\"Please provide a valid token_id\");\n    }\n\n    return this.request(`/token/${token_id}`, {\n      method: \"DELETE\"\n    });\n  }\n\n};","map":{"version":3,"names":["module","exports","createToken","createTokenParams","name","scopes","domain_id","scopesArray","err","Error","length","i","scope","includes","request","method","body","updateToken","updateTokenParams","token_id","status","deleteToken","deleteTokenParams"],"sources":["/Users/loyanix/projects/smart-hamster-web-app/node_modules/mailersend/src/modules/tokens.js"],"sourcesContent":["module.exports = {\n  //TOKENS\n  createToken(createTokenParams) {\n    const { name, scopes, domain_id } = createTokenParams;\n\n    const scopesArray = [\n      \"email_full\",\n      \"domains_read\",\n      \"domains_full\",\n      \"activity_read\",\n      \"activity_full\",\n      \"analytics_read\",\n      \"analytics_full\",\n      \"tokens_full\",\n    ];\n\n    //Check for required values name and scopes\n    if (!name || !scopes || !domain_id) {\n      err = new Error(\n        \"Please include a name, domain_id and scopes in your request\"\n      );\n      throw err;\n    }\n\n    //Check if scopes have values\n    if (scopes.length < 1) {\n      throw new Error(\"You need to add at least 1 scope\");\n    }\n\n    //Check if all values in scopes array are valid.\n    for (let i = 0; i < scopes.length; i++) {\n      const scope = scopes[i];\n      if (!scopesArray.includes(scope)) {\n        throw new Error(`\"${scope}\" is not a valid value for scopes`);\n      }\n    }\n\n    //Check if name value is not bigger than 191 characters\n    if (name.length > 191) {\n      throw new Error(\"Token name has to be less than 191 characters\");\n    }\n\n    return this.request(\"/token\", {\n      method: \"POST\",\n      body: createTokenParams\n    });\n  },\n\n  updateToken(updateTokenParams) {\n    const { token_id, status } = updateTokenParams;\n\n    if (!token_id) {\n      throw new Error(\"Please provide a valid token_id\");\n    }\n\n    if (!['pause', 'unpause'].includes(status)) {\n      throw new Error(\"Please provide a valid status\");\n    }\n\n    return this.request(`/token/${token_id}/settings`, {\n      method: \"PUT\",\n      body: {\n        status: status,\n      }\n    });\n  },\n\n  deleteToken(deleteTokenParams) {\n    const { token_id } = deleteTokenParams;\n\n    //Check if token_id was provided\n    if (!token_id) {\n      throw new Error(\"Please provide a valid token_id\");\n    }\n\n    return this.request(`/token/${token_id}`, {\n      method: \"DELETE\"\n    });\n  }\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;EACf;EACAC,WAAW,CAACC,iBAAD,EAAoB;IAC7B,MAAM;MAAEC,IAAF;MAAQC,MAAR;MAAgBC;IAAhB,IAA8BH,iBAApC;IAEA,MAAMI,WAAW,GAAG,CAClB,YADkB,EAElB,cAFkB,EAGlB,cAHkB,EAIlB,eAJkB,EAKlB,eALkB,EAMlB,gBANkB,EAOlB,gBAPkB,EAQlB,aARkB,CAApB,CAH6B,CAc7B;;IACA,IAAI,CAACH,IAAD,IAAS,CAACC,MAAV,IAAoB,CAACC,SAAzB,EAAoC;MAClCE,GAAG,GAAG,IAAIC,KAAJ,CACJ,6DADI,CAAN;MAGA,MAAMD,GAAN;IACD,CApB4B,CAsB7B;;;IACA,IAAIH,MAAM,CAACK,MAAP,GAAgB,CAApB,EAAuB;MACrB,MAAM,IAAID,KAAJ,CAAU,kCAAV,CAAN;IACD,CAzB4B,CA2B7B;;;IACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACK,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;MACtC,MAAMC,KAAK,GAAGP,MAAM,CAACM,CAAD,CAApB;;MACA,IAAI,CAACJ,WAAW,CAACM,QAAZ,CAAqBD,KAArB,CAAL,EAAkC;QAChC,MAAM,IAAIH,KAAJ,CAAW,IAAGG,KAAM,mCAApB,CAAN;MACD;IACF,CAjC4B,CAmC7B;;;IACA,IAAIR,IAAI,CAACM,MAAL,GAAc,GAAlB,EAAuB;MACrB,MAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;IACD;;IAED,OAAO,KAAKK,OAAL,CAAa,QAAb,EAAuB;MAC5BC,MAAM,EAAE,MADoB;MAE5BC,IAAI,EAAEb;IAFsB,CAAvB,CAAP;EAID,CA9Cc;;EAgDfc,WAAW,CAACC,iBAAD,EAAoB;IAC7B,MAAM;MAAEC,QAAF;MAAYC;IAAZ,IAAuBF,iBAA7B;;IAEA,IAAI,CAACC,QAAL,EAAe;MACb,MAAM,IAAIV,KAAJ,CAAU,iCAAV,CAAN;IACD;;IAED,IAAI,CAAC,CAAC,OAAD,EAAU,SAAV,EAAqBI,QAArB,CAA8BO,MAA9B,CAAL,EAA4C;MAC1C,MAAM,IAAIX,KAAJ,CAAU,+BAAV,CAAN;IACD;;IAED,OAAO,KAAKK,OAAL,CAAc,UAASK,QAAS,WAAhC,EAA4C;MACjDJ,MAAM,EAAE,KADyC;MAEjDC,IAAI,EAAE;QACJI,MAAM,EAAEA;MADJ;IAF2C,CAA5C,CAAP;EAMD,CAjEc;;EAmEfC,WAAW,CAACC,iBAAD,EAAoB;IAC7B,MAAM;MAAEH;IAAF,IAAeG,iBAArB,CAD6B,CAG7B;;IACA,IAAI,CAACH,QAAL,EAAe;MACb,MAAM,IAAIV,KAAJ,CAAU,iCAAV,CAAN;IACD;;IAED,OAAO,KAAKK,OAAL,CAAc,UAASK,QAAS,EAAhC,EAAmC;MACxCJ,MAAM,EAAE;IADgC,CAAnC,CAAP;EAGD;;AA9Ec,CAAjB"},"metadata":{},"sourceType":"script"}