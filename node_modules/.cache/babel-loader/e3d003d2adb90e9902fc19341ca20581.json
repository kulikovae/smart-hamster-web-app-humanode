{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst depd_1 = __importDefault(require(\"depd\"));\n\nconst transaction_1 = require(\"./transaction\");\n\nconst providers_1 = require(\"./providers\");\n\nconst borsh_1 = require(\"borsh\");\n\nconst key_pair_1 = require(\"./utils/key_pair\");\n\nconst errors_1 = require(\"./utils/errors\");\n\nconst rpc_errors_1 = require(\"./utils/rpc_errors\");\n\nconst constants_1 = require(\"./constants\");\n\nconst exponential_backoff_1 = __importDefault(require(\"./utils/exponential-backoff\")); // Default number of retries with different nonce before giving up on a transaction.\n\n\nconst TX_NONCE_RETRY_NUMBER = 12; // Default wait until next retry in millis.\n\nconst TX_NONCE_RETRY_WAIT = 500; // Exponential back off for waiting to retry.\n\nconst TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\n\nfunction parseJsonFromRawResponse(response) {\n  return JSON.parse(Buffer.from(response).toString());\n}\n\nfunction bytesJsonStringify(input) {\n  return Buffer.from(JSON.stringify(input));\n}\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link KeyPair}.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}\n * @hint Use {@link WalletConnection} in the browser to redirect to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for Account/key management using the {@link BrowserLocalStorageKeyStore}.\n * @see {@link https://nomicon.io/DataStructures/Account.html | Account Spec}\n */\n\n\nclass Account {\n  constructor(connection, accountId) {\n    /** @hidden */\n    this.accessKeyByPublicKeyCache = {};\n    this.connection = connection;\n    this.accountId = accountId;\n  }\n  /**\n   * Returns basic NEAR account information via the `view_account` RPC query method\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-account}\n   */\n\n\n  state() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.connection.provider.query({\n        request_type: 'view_account',\n        account_id: this.accountId,\n        finality: 'optimistic'\n      });\n    });\n  }\n  /** @hidden */\n\n\n  printLogsAndFailures(contractId, results) {\n    if (!process.env['NEAR_NO_LOGS']) {\n      for (const result of results) {\n        console.log(`Receipt${result.receiptIds.length > 1 ? 's' : ''}: ${result.receiptIds.join(', ')}`);\n        this.printLogs(contractId, result.logs, '\\t');\n\n        if (result.failure) {\n          console.warn(`\\tFailure [${contractId}]: ${result.failure}`);\n        }\n      }\n    }\n  }\n  /** @hidden */\n\n\n  printLogs(contractId, logs) {\n    let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n    if (!process.env['NEAR_NO_LOGS']) {\n      for (const log of logs) {\n        console.log(`${prefix}Log [${contractId}]: ${log}`);\n      }\n    }\n  }\n  /**\n   * Create a signed transaction which can be broadcast to the network\n   * @param receiverId NEAR account receiving the transaction\n   * @param actions list of actions to perform as part of the transaction\n   * @see {@link JsonRpcProvider.sendTransaction}\n   */\n\n\n  signTransaction(receiverId, actions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accessKeyInfo = yield this.findAccessKey(receiverId, actions);\n\n      if (!accessKeyInfo) {\n        throw new providers_1.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair exists for this account`, 'KeyNotFound');\n      }\n\n      const {\n        accessKey\n      } = accessKeyInfo;\n      const block = yield this.connection.provider.block({\n        finality: 'final'\n      });\n      const blockHash = block.header.hash;\n      const nonce = ++accessKey.nonce;\n      return yield (0, transaction_1.signTransaction)(receiverId, nonce, actions, (0, borsh_1.baseDecode)(blockHash), this.connection.signer, this.accountId, this.connection.networkId);\n    });\n  }\n  /**\n   * Sign a transaction to preform a list of actions and broadcast it using the RPC API.\n   * @see {@link JsonRpcProvider.sendTransaction}\n   */\n\n\n  signAndSendTransaction(_ref) {\n    let {\n      receiverId,\n      actions,\n      returnError\n    } = _ref;\n    return __awaiter(this, void 0, void 0, function* () {\n      let txHash, signedTx; // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)\n\n      const result = yield (0, exponential_backoff_1.default)(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, () => __awaiter(this, void 0, void 0, function* () {\n        [txHash, signedTx] = yield this.signTransaction(receiverId, actions);\n        const publicKey = signedTx.transaction.publicKey;\n\n        try {\n          return yield this.connection.provider.sendTransaction(signedTx);\n        } catch (error) {\n          if (error.type === 'InvalidNonce') {\n            (0, errors_1.logWarning)(`Retrying transaction ${receiverId}:${(0, borsh_1.baseEncode)(txHash)} with new nonce.`);\n            delete this.accessKeyByPublicKeyCache[publicKey.toString()];\n            return null;\n          }\n\n          if (error.type === 'Expired') {\n            (0, errors_1.logWarning)(`Retrying transaction ${receiverId}:${(0, borsh_1.baseEncode)(txHash)} due to expired block hash`);\n            return null;\n          }\n\n          error.context = new providers_1.ErrorContext((0, borsh_1.baseEncode)(txHash));\n          throw error;\n        }\n      }));\n\n      if (!result) {\n        // TODO: This should have different code actually, as means \"transaction not submitted for sure\"\n        throw new providers_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n      }\n\n      const flatLogs = [result.transaction_outcome, ...result.receipts_outcome].reduce((acc, it) => {\n        if (it.outcome.logs.length || typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object') {\n          return acc.concat({\n            'receiptIds': it.outcome.receipt_ids,\n            'logs': it.outcome.logs,\n            'failure': typeof it.outcome.status.Failure != 'undefined' ? (0, rpc_errors_1.parseRpcError)(it.outcome.status.Failure) : null\n          });\n        } else return acc;\n      }, []);\n      this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);\n\n      if (!returnError && typeof result.status === 'object' && typeof result.status.Failure === 'object') {\n        // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n        if (result.status.Failure.error_message && result.status.Failure.error_type) {\n          throw new providers_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);\n        } else {\n          throw (0, rpc_errors_1.parseResultError)(result);\n        }\n      } // TODO: if Tx is Unknown or Started.\n\n\n      return result;\n    });\n  }\n  /**\n   * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link KeyStore}.\n   *\n   * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n   *\n   * @param receiverId currently unused (see todo)\n   * @param actions currently unused (see todo)\n   * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  findAccessKey(receiverId, actions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: Find matching access key based on transaction (i.e. receiverId and actions)\n      const publicKey = yield this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n\n      if (!publicKey) {\n        throw new providers_1.TypedError(`no matching key pair found in ${this.connection.signer}`, 'PublicKeyNotFound');\n      }\n\n      const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n\n      if (cachedAccessKey !== undefined) {\n        return {\n          publicKey,\n          accessKey: cachedAccessKey\n        };\n      }\n\n      try {\n        const accessKey = yield this.connection.provider.query({\n          request_type: 'view_access_key',\n          account_id: this.accountId,\n          public_key: publicKey.toString(),\n          finality: 'optimistic'\n        }); // this function can be called multiple times and retrieve the same access key\n        // this checks to see if the access key was already retrieved and cached while\n        // the above network call was in flight. To keep nonce values in line, we return\n        // the cached access key.\n\n        if (this.accessKeyByPublicKeyCache[publicKey.toString()]) {\n          return {\n            publicKey,\n            accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()]\n          };\n        }\n\n        this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n        return {\n          publicKey,\n          accessKey\n        };\n      } catch (e) {\n        if (e.type == 'AccessKeyDoesNotExist') {\n          return null;\n        }\n\n        throw e;\n      }\n    });\n  }\n  /**\n   * Create a new account and deploy a contract to it\n   *\n   * @param contractId NEAR account where the contract is deployed\n   * @param publicKey The public key to add to the created contract account\n   * @param data The compiled contract code\n   * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n   */\n\n\n  createAndDeployContract(contractId, publicKey, data, amount) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accessKey = (0, transaction_1.fullAccessKey)();\n      yield this.signAndSendTransaction({\n        receiverId: contractId,\n        actions: [(0, transaction_1.createAccount)(), (0, transaction_1.transfer)(amount), (0, transaction_1.addKey)(key_pair_1.PublicKey.from(publicKey), accessKey), (0, transaction_1.deployContract)(data)]\n      });\n      const contractAccount = new Account(this.connection, contractId);\n      return contractAccount;\n    });\n  }\n  /**\n   * @param receiverId NEAR account receiving Ⓝ\n   * @param amount Amount to send in yoctoⓃ\n   */\n\n\n  sendMoney(receiverId, amount) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.signAndSendTransaction({\n        receiverId,\n        actions: [(0, transaction_1.transfer)(amount)]\n      });\n    });\n  }\n  /**\n   * @param newAccountId NEAR account name to be created\n   * @param publicKey A public key created from the masterAccount\n   */\n\n\n  createAccount(newAccountId, publicKey, amount) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accessKey = (0, transaction_1.fullAccessKey)();\n      return this.signAndSendTransaction({\n        receiverId: newAccountId,\n        actions: [(0, transaction_1.createAccount)(), (0, transaction_1.transfer)(amount), (0, transaction_1.addKey)(key_pair_1.PublicKey.from(publicKey), accessKey)]\n      });\n    });\n  }\n  /**\n   * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n   */\n\n\n  deleteAccount(beneficiaryId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!process.env['NEAR_NO_LOGS']) {\n        console.log('Deleting an account does not automatically transfer NFTs and FTs to the beneficiary address. Ensure to transfer assets before deleting.');\n      }\n\n      return this.signAndSendTransaction({\n        receiverId: this.accountId,\n        actions: [(0, transaction_1.deleteAccount)(beneficiaryId)]\n      });\n    });\n  }\n  /**\n   * @param data The compiled contract code\n   */\n\n\n  deployContract(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.signAndSendTransaction({\n        receiverId: this.accountId,\n        actions: [(0, transaction_1.deployContract)(data)]\n      });\n    });\n  }\n  /** @hidden */\n\n\n  encodeJSContractArgs(contractId, method, args) {\n    return Buffer.concat([Buffer.from(contractId), Buffer.from([0]), Buffer.from(method), Buffer.from([0]), Buffer.from(args)]);\n  }\n  /**\n   * Execute function call\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  functionCall(_ref2) {\n    let {\n      contractId,\n      methodName,\n      args = {},\n      gas = constants_1.DEFAULT_FUNCTION_CALL_GAS,\n      attachedDeposit,\n      walletMeta,\n      walletCallbackUrl,\n      stringify,\n      jsContract\n    } = _ref2;\n    return __awaiter(this, void 0, void 0, function* () {\n      this.validateArgs(args);\n      let functionCallArgs;\n\n      if (jsContract) {\n        const encodedArgs = this.encodeJSContractArgs(contractId, methodName, JSON.stringify(args));\n        functionCallArgs = ['call_js_contract', encodedArgs, gas, attachedDeposit, null, true];\n      } else {\n        const stringifyArg = stringify === undefined ? transaction_1.stringifyJsonOrBytes : stringify;\n        functionCallArgs = [methodName, args, gas, attachedDeposit, stringifyArg, false];\n      }\n\n      return this.signAndSendTransaction({\n        receiverId: jsContract ? this.connection.jsvmAccountId : contractId,\n        // eslint-disable-next-line prefer-spread\n        actions: [transaction_1.functionCall.apply(void 0, functionCallArgs)],\n        walletMeta,\n        walletCallbackUrl\n      });\n    });\n  }\n  /**\n   * @see {@link https://docs.near.org/docs/concepts/account#access-keys}\n   * @todo expand this API to support more options.\n   * @param publicKey A public key to be associated with the contract\n   * @param contractId NEAR account where the contract is deployed\n   * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n   * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n   */\n\n\n  addKey(publicKey, contractId, methodNames, amount) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!methodNames) {\n        methodNames = [];\n      }\n\n      if (!Array.isArray(methodNames)) {\n        methodNames = [methodNames];\n      }\n\n      let accessKey;\n\n      if (!contractId) {\n        accessKey = (0, transaction_1.fullAccessKey)();\n      } else {\n        accessKey = (0, transaction_1.functionCallAccessKey)(contractId, methodNames, amount);\n      }\n\n      return this.signAndSendTransaction({\n        receiverId: this.accountId,\n        actions: [(0, transaction_1.addKey)(key_pair_1.PublicKey.from(publicKey), accessKey)]\n      });\n    });\n  }\n  /**\n   * @param publicKey The public key to be deleted\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  deleteKey(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.signAndSendTransaction({\n        receiverId: this.accountId,\n        actions: [(0, transaction_1.deleteKey)(key_pair_1.PublicKey.from(publicKey))]\n      });\n    });\n  }\n  /**\n   * @see {@link https://docs.near.org/docs/validator/staking-overview}\n   *\n   * @param publicKey The public key for the account that's staking\n   * @param amount The account to stake in yoctoⓃ\n   */\n\n\n  stake(publicKey, amount) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.signAndSendTransaction({\n        receiverId: this.accountId,\n        actions: [(0, transaction_1.stake)(amount, key_pair_1.PublicKey.from(publicKey))]\n      });\n    });\n  }\n  /** @hidden */\n\n\n  validateArgs(args) {\n    const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n\n    if (isUint8Array) {\n      return;\n    }\n\n    if (Array.isArray(args) || typeof args !== 'object') {\n      throw new errors_1.PositionalArgsError();\n    }\n  }\n  /**\n   * Invoke a contract view function using the RPC API.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}\n   *\n   * @param contractId NEAR account where the contract is deployed\n   * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n   * @param args Any arguments to the view contract method, wrapped in JSON\n   * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n   * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n   * @param options.jsContract Is contract from JS SDK, automatically encodes args from JS SDK to binary.\n   * @param options.blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n   * @returns {Promise<any>}\n   */\n\n\n  viewFunction() {\n    for (var _len = arguments.length, restArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      restArgs[_key] = arguments[_key];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof restArgs[0] === 'string') {\n        const contractId = restArgs[0];\n        const methodName = restArgs[1];\n        const args = restArgs[2];\n        const options = restArgs[3];\n        return yield this.viewFunctionV1(contractId, methodName, args, options);\n      } else {\n        return yield this.viewFunctionV2(restArgs[0]);\n      }\n    });\n  }\n\n  viewFunctionV1(contractId, methodName) {\n    let args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let {\n      parse = parseJsonFromRawResponse,\n      stringify = bytesJsonStringify,\n      jsContract = false,\n      blockQuery = {\n        finality: 'optimistic'\n      }\n    } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      const deprecate = (0, depd_1.default)('Account.viewFunction(contractId, methodName, args, options)');\n      deprecate('use `Account.viewFunction(ViewFunctionCallOptions)` instead');\n      return this.viewFunctionV2({\n        contractId,\n        methodName,\n        args,\n        parse,\n        stringify,\n        jsContract,\n        blockQuery\n      });\n    });\n  }\n\n  viewFunctionV2(_ref3) {\n    let {\n      contractId,\n      methodName,\n      args,\n      parse = parseJsonFromRawResponse,\n      stringify = bytesJsonStringify,\n      jsContract = false,\n      blockQuery = {\n        finality: 'optimistic'\n      }\n    } = _ref3;\n    return __awaiter(this, void 0, void 0, function* () {\n      let encodedArgs;\n      this.validateArgs(args);\n\n      if (jsContract) {\n        encodedArgs = this.encodeJSContractArgs(contractId, methodName, Object.keys(args).length > 0 ? JSON.stringify(args) : '');\n      } else {\n        encodedArgs = stringify(args);\n      }\n\n      const result = yield this.connection.provider.query(Object.assign(Object.assign({\n        request_type: 'call_function'\n      }, blockQuery), {\n        account_id: jsContract ? this.connection.jsvmAccountId : contractId,\n        method_name: jsContract ? 'view_js_contract' : methodName,\n        args_base64: encodedArgs.toString('base64')\n      }));\n\n      if (result.logs) {\n        this.printLogs(contractId, result.logs);\n      }\n\n      return result.result && result.result.length > 0 && parse(Buffer.from(result.result));\n    });\n  }\n  /**\n   * Returns the state (key value pairs) of this account's contract based on the key prefix.\n   * Pass an empty string for prefix if you would like to return the entire state.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-contract-state}\n   *\n   * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n   * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n   */\n\n\n  viewState(prefix) {\n    let blockQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      finality: 'optimistic'\n    };\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        values\n      } = yield this.connection.provider.query(Object.assign(Object.assign({\n        request_type: 'view_state'\n      }, blockQuery), {\n        account_id: this.accountId,\n        prefix_base64: Buffer.from(prefix).toString('base64')\n      }));\n      return values.map(_ref4 => {\n        let {\n          key,\n          value\n        } = _ref4;\n        return {\n          key: Buffer.from(key, 'base64'),\n          value: Buffer.from(value, 'base64')\n        };\n      });\n    });\n  }\n  /**\n   * Get all access keys for the account\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-access-key-list}\n   */\n\n\n  getAccessKeys() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield this.connection.provider.query({\n        request_type: 'view_access_key_list',\n        account_id: this.accountId,\n        finality: 'optimistic'\n      }); // A breaking API change introduced extra information into the\n      // response, so it now returns an object with a `keys` field instead\n      // of an array: https://github.com/nearprotocol/nearcore/pull/1789\n\n      if (Array.isArray(response)) {\n        return response;\n      }\n\n      return response.keys;\n    });\n  }\n  /**\n   * Returns a list of authorized apps\n   * @todo update the response value to return all the different keys, not just app keys.\n   */\n\n\n  getAccountDetails() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: update the response value to return all the different keys, not just app keys.\n      // Also if we need this function, or getAccessKeys is good enough.\n      const accessKeys = yield this.getAccessKeys();\n      const authorizedApps = accessKeys.filter(item => item.access_key.permission !== 'FullAccess').map(item => {\n        const perm = item.access_key.permission;\n        return {\n          contractId: perm.FunctionCall.receiver_id,\n          amount: perm.FunctionCall.allowance,\n          publicKey: item.public_key\n        };\n      });\n      return {\n        authorizedApps\n      };\n    });\n  }\n  /**\n   * Returns calculated account balance\n   */\n\n\n  getAccountBalance() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const protocolConfig = yield this.connection.provider.experimental_protocolConfig({\n        finality: 'final'\n      });\n      const state = yield this.state();\n      const costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);\n      const stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);\n      const staked = new bn_js_1.default(state.locked);\n      const totalBalance = new bn_js_1.default(state.amount).add(staked);\n      const availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));\n      return {\n        total: totalBalance.toString(),\n        stateStaked: stateStaked.toString(),\n        staked: staked.toString(),\n        available: availableBalance.toString()\n      };\n    });\n  }\n\n}\n\nexports.Account = Account;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","Account","bn_js_1","require","depd_1","transaction_1","providers_1","borsh_1","key_pair_1","errors_1","rpc_errors_1","constants_1","exponential_backoff_1","TX_NONCE_RETRY_NUMBER","TX_NONCE_RETRY_WAIT","TX_NONCE_RETRY_WAIT_BACKOFF","parseJsonFromRawResponse","response","JSON","parse","Buffer","from","toString","bytesJsonStringify","input","stringify","constructor","connection","accountId","accessKeyByPublicKeyCache","state","provider","query","request_type","account_id","finality","printLogsAndFailures","contractId","results","process","env","console","log","receiptIds","length","join","printLogs","logs","failure","warn","prefix","signTransaction","receiverId","actions","accessKeyInfo","findAccessKey","TypedError","networkId","accessKey","block","blockHash","header","hash","nonce","baseDecode","signer","signAndSendTransaction","returnError","txHash","signedTx","default","publicKey","transaction","sendTransaction","error","type","logWarning","baseEncode","context","ErrorContext","flatLogs","transaction_outcome","receipts_outcome","reduce","acc","it","outcome","status","Failure","concat","receipt_ids","parseRpcError","error_message","error_type","id","parseResultError","getPublicKey","cachedAccessKey","undefined","public_key","createAndDeployContract","data","amount","fullAccessKey","createAccount","transfer","addKey","PublicKey","deployContract","contractAccount","sendMoney","newAccountId","deleteAccount","beneficiaryId","encodeJSContractArgs","method","args","functionCall","methodName","gas","DEFAULT_FUNCTION_CALL_GAS","attachedDeposit","walletMeta","walletCallbackUrl","jsContract","validateArgs","functionCallArgs","encodedArgs","stringifyArg","stringifyJsonOrBytes","jsvmAccountId","methodNames","Array","isArray","functionCallAccessKey","deleteKey","stake","isUint8Array","byteLength","PositionalArgsError","viewFunction","restArgs","options","viewFunctionV1","viewFunctionV2","blockQuery","deprecate","keys","assign","method_name","args_base64","viewState","values","prefix_base64","map","key","getAccessKeys","getAccountDetails","accessKeys","authorizedApps","filter","item","access_key","permission","perm","FunctionCall","receiver_id","allowance","getAccountBalance","protocolConfig","experimental_protocolConfig","costPerByte","runtime_config","storage_amount_per_byte","stateStaked","storage_usage","mul","staked","locked","totalBalance","add","availableBalance","sub","max","total","available"],"sources":["/Users/loyanix/projects/smart-hamster-web-app/node_modules/near-api-js/lib/account.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst transaction_1 = require(\"./transaction\");\nconst providers_1 = require(\"./providers\");\nconst borsh_1 = require(\"borsh\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst errors_1 = require(\"./utils/errors\");\nconst rpc_errors_1 = require(\"./utils/rpc_errors\");\nconst constants_1 = require(\"./constants\");\nconst exponential_backoff_1 = __importDefault(require(\"./utils/exponential-backoff\"));\n// Default number of retries with different nonce before giving up on a transaction.\nconst TX_NONCE_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst TX_NONCE_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\nfunction parseJsonFromRawResponse(response) {\n    return JSON.parse(Buffer.from(response).toString());\n}\nfunction bytesJsonStringify(input) {\n    return Buffer.from(JSON.stringify(input));\n}\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link KeyPair}.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}\n * @hint Use {@link WalletConnection} in the browser to redirect to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for Account/key management using the {@link BrowserLocalStorageKeyStore}.\n * @see {@link https://nomicon.io/DataStructures/Account.html | Account Spec}\n */\nclass Account {\n    constructor(connection, accountId) {\n        /** @hidden */\n        this.accessKeyByPublicKeyCache = {};\n        this.connection = connection;\n        this.accountId = accountId;\n    }\n    /**\n     * Returns basic NEAR account information via the `view_account` RPC query method\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-account}\n     */\n    state() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.connection.provider.query({\n                request_type: 'view_account',\n                account_id: this.accountId,\n                finality: 'optimistic'\n            });\n        });\n    }\n    /** @hidden */\n    printLogsAndFailures(contractId, results) {\n        if (!process.env['NEAR_NO_LOGS']) {\n            for (const result of results) {\n                console.log(`Receipt${result.receiptIds.length > 1 ? 's' : ''}: ${result.receiptIds.join(', ')}`);\n                this.printLogs(contractId, result.logs, '\\t');\n                if (result.failure) {\n                    console.warn(`\\tFailure [${contractId}]: ${result.failure}`);\n                }\n            }\n        }\n    }\n    /** @hidden */\n    printLogs(contractId, logs, prefix = '') {\n        if (!process.env['NEAR_NO_LOGS']) {\n            for (const log of logs) {\n                console.log(`${prefix}Log [${contractId}]: ${log}`);\n            }\n        }\n    }\n    /**\n     * Create a signed transaction which can be broadcast to the network\n     * @param receiverId NEAR account receiving the transaction\n     * @param actions list of actions to perform as part of the transaction\n     * @see {@link JsonRpcProvider.sendTransaction}\n     */\n    signTransaction(receiverId, actions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accessKeyInfo = yield this.findAccessKey(receiverId, actions);\n            if (!accessKeyInfo) {\n                throw new providers_1.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair exists for this account`, 'KeyNotFound');\n            }\n            const { accessKey } = accessKeyInfo;\n            const block = yield this.connection.provider.block({ finality: 'final' });\n            const blockHash = block.header.hash;\n            const nonce = ++accessKey.nonce;\n            return yield (0, transaction_1.signTransaction)(receiverId, nonce, actions, (0, borsh_1.baseDecode)(blockHash), this.connection.signer, this.accountId, this.connection.networkId);\n        });\n    }\n    /**\n     * Sign a transaction to preform a list of actions and broadcast it using the RPC API.\n     * @see {@link JsonRpcProvider.sendTransaction}\n     */\n    signAndSendTransaction({ receiverId, actions, returnError }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let txHash, signedTx;\n            // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)\n            const result = yield (0, exponential_backoff_1.default)(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, () => __awaiter(this, void 0, void 0, function* () {\n                [txHash, signedTx] = yield this.signTransaction(receiverId, actions);\n                const publicKey = signedTx.transaction.publicKey;\n                try {\n                    return yield this.connection.provider.sendTransaction(signedTx);\n                }\n                catch (error) {\n                    if (error.type === 'InvalidNonce') {\n                        (0, errors_1.logWarning)(`Retrying transaction ${receiverId}:${(0, borsh_1.baseEncode)(txHash)} with new nonce.`);\n                        delete this.accessKeyByPublicKeyCache[publicKey.toString()];\n                        return null;\n                    }\n                    if (error.type === 'Expired') {\n                        (0, errors_1.logWarning)(`Retrying transaction ${receiverId}:${(0, borsh_1.baseEncode)(txHash)} due to expired block hash`);\n                        return null;\n                    }\n                    error.context = new providers_1.ErrorContext((0, borsh_1.baseEncode)(txHash));\n                    throw error;\n                }\n            }));\n            if (!result) {\n                // TODO: This should have different code actually, as means \"transaction not submitted for sure\"\n                throw new providers_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n            }\n            const flatLogs = [result.transaction_outcome, ...result.receipts_outcome].reduce((acc, it) => {\n                if (it.outcome.logs.length ||\n                    (typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object')) {\n                    return acc.concat({\n                        'receiptIds': it.outcome.receipt_ids,\n                        'logs': it.outcome.logs,\n                        'failure': typeof it.outcome.status.Failure != 'undefined' ? (0, rpc_errors_1.parseRpcError)(it.outcome.status.Failure) : null\n                    });\n                }\n                else\n                    return acc;\n            }, []);\n            this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);\n            if (!returnError && typeof result.status === 'object' && typeof result.status.Failure === 'object') {\n                // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                if (result.status.Failure.error_message && result.status.Failure.error_type) {\n                    throw new providers_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);\n                }\n                else {\n                    throw (0, rpc_errors_1.parseResultError)(result);\n                }\n            }\n            // TODO: if Tx is Unknown or Started.\n            return result;\n        });\n    }\n    /**\n     * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link KeyStore}.\n     *\n     * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n     *\n     * @param receiverId currently unused (see todo)\n     * @param actions currently unused (see todo)\n     * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    findAccessKey(receiverId, actions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: Find matching access key based on transaction (i.e. receiverId and actions)\n            const publicKey = yield this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n            if (!publicKey) {\n                throw new providers_1.TypedError(`no matching key pair found in ${this.connection.signer}`, 'PublicKeyNotFound');\n            }\n            const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n            if (cachedAccessKey !== undefined) {\n                return { publicKey, accessKey: cachedAccessKey };\n            }\n            try {\n                const accessKey = yield this.connection.provider.query({\n                    request_type: 'view_access_key',\n                    account_id: this.accountId,\n                    public_key: publicKey.toString(),\n                    finality: 'optimistic'\n                });\n                // this function can be called multiple times and retrieve the same access key\n                // this checks to see if the access key was already retrieved and cached while\n                // the above network call was in flight. To keep nonce values in line, we return\n                // the cached access key.\n                if (this.accessKeyByPublicKeyCache[publicKey.toString()]) {\n                    return { publicKey, accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()] };\n                }\n                this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n                return { publicKey, accessKey };\n            }\n            catch (e) {\n                if (e.type == 'AccessKeyDoesNotExist') {\n                    return null;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Create a new account and deploy a contract to it\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param publicKey The public key to add to the created contract account\n     * @param data The compiled contract code\n     * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n     */\n    createAndDeployContract(contractId, publicKey, data, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accessKey = (0, transaction_1.fullAccessKey)();\n            yield this.signAndSendTransaction({\n                receiverId: contractId,\n                actions: [(0, transaction_1.createAccount)(), (0, transaction_1.transfer)(amount), (0, transaction_1.addKey)(key_pair_1.PublicKey.from(publicKey), accessKey), (0, transaction_1.deployContract)(data)]\n            });\n            const contractAccount = new Account(this.connection, contractId);\n            return contractAccount;\n        });\n    }\n    /**\n     * @param receiverId NEAR account receiving Ⓝ\n     * @param amount Amount to send in yoctoⓃ\n     */\n    sendMoney(receiverId, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.signAndSendTransaction({\n                receiverId,\n                actions: [(0, transaction_1.transfer)(amount)]\n            });\n        });\n    }\n    /**\n     * @param newAccountId NEAR account name to be created\n     * @param publicKey A public key created from the masterAccount\n     */\n    createAccount(newAccountId, publicKey, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accessKey = (0, transaction_1.fullAccessKey)();\n            return this.signAndSendTransaction({\n                receiverId: newAccountId,\n                actions: [(0, transaction_1.createAccount)(), (0, transaction_1.transfer)(amount), (0, transaction_1.addKey)(key_pair_1.PublicKey.from(publicKey), accessKey)]\n            });\n        });\n    }\n    /**\n     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n     */\n    deleteAccount(beneficiaryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!process.env['NEAR_NO_LOGS']) {\n                console.log('Deleting an account does not automatically transfer NFTs and FTs to the beneficiary address. Ensure to transfer assets before deleting.');\n            }\n            return this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions: [(0, transaction_1.deleteAccount)(beneficiaryId)]\n            });\n        });\n    }\n    /**\n     * @param data The compiled contract code\n     */\n    deployContract(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions: [(0, transaction_1.deployContract)(data)]\n            });\n        });\n    }\n    /** @hidden */\n    encodeJSContractArgs(contractId, method, args) {\n        return Buffer.concat([Buffer.from(contractId), Buffer.from([0]), Buffer.from(method), Buffer.from([0]), Buffer.from(args)]);\n    }\n    /**\n     * Execute function call\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    functionCall({ contractId, methodName, args = {}, gas = constants_1.DEFAULT_FUNCTION_CALL_GAS, attachedDeposit, walletMeta, walletCallbackUrl, stringify, jsContract }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateArgs(args);\n            let functionCallArgs;\n            if (jsContract) {\n                const encodedArgs = this.encodeJSContractArgs(contractId, methodName, JSON.stringify(args));\n                functionCallArgs = ['call_js_contract', encodedArgs, gas, attachedDeposit, null, true];\n            }\n            else {\n                const stringifyArg = stringify === undefined ? transaction_1.stringifyJsonOrBytes : stringify;\n                functionCallArgs = [methodName, args, gas, attachedDeposit, stringifyArg, false];\n            }\n            return this.signAndSendTransaction({\n                receiverId: jsContract ? this.connection.jsvmAccountId : contractId,\n                // eslint-disable-next-line prefer-spread\n                actions: [transaction_1.functionCall.apply(void 0, functionCallArgs)],\n                walletMeta,\n                walletCallbackUrl\n            });\n        });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/concepts/account#access-keys}\n     * @todo expand this API to support more options.\n     * @param publicKey A public key to be associated with the contract\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n     */\n    addKey(publicKey, contractId, methodNames, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!methodNames) {\n                methodNames = [];\n            }\n            if (!Array.isArray(methodNames)) {\n                methodNames = [methodNames];\n            }\n            let accessKey;\n            if (!contractId) {\n                accessKey = (0, transaction_1.fullAccessKey)();\n            }\n            else {\n                accessKey = (0, transaction_1.functionCallAccessKey)(contractId, methodNames, amount);\n            }\n            return this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions: [(0, transaction_1.addKey)(key_pair_1.PublicKey.from(publicKey), accessKey)]\n            });\n        });\n    }\n    /**\n     * @param publicKey The public key to be deleted\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    deleteKey(publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions: [(0, transaction_1.deleteKey)(key_pair_1.PublicKey.from(publicKey))]\n            });\n        });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/validator/staking-overview}\n     *\n     * @param publicKey The public key for the account that's staking\n     * @param amount The account to stake in yoctoⓃ\n     */\n    stake(publicKey, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions: [(0, transaction_1.stake)(amount, key_pair_1.PublicKey.from(publicKey))]\n            });\n        });\n    }\n    /** @hidden */\n    validateArgs(args) {\n        const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n        if (isUint8Array) {\n            return;\n        }\n        if (Array.isArray(args) || typeof args !== 'object') {\n            throw new errors_1.PositionalArgsError();\n        }\n    }\n    /**\n     * Invoke a contract view function using the RPC API.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n     * @param args Any arguments to the view contract method, wrapped in JSON\n     * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n     * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n     * @param options.jsContract Is contract from JS SDK, automatically encodes args from JS SDK to binary.\n     * @param options.blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     * @returns {Promise<any>}\n     */\n    viewFunction(...restArgs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof restArgs[0] === 'string') {\n                const contractId = restArgs[0];\n                const methodName = restArgs[1];\n                const args = restArgs[2];\n                const options = restArgs[3];\n                return yield this.viewFunctionV1(contractId, methodName, args, options);\n            }\n            else {\n                return yield this.viewFunctionV2(restArgs[0]);\n            }\n        });\n    }\n    viewFunctionV1(contractId, methodName, args = {}, { parse = parseJsonFromRawResponse, stringify = bytesJsonStringify, jsContract = false, blockQuery = { finality: 'optimistic' } } = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const deprecate = (0, depd_1.default)('Account.viewFunction(contractId, methodName, args, options)');\n            deprecate('use `Account.viewFunction(ViewFunctionCallOptions)` instead');\n            return this.viewFunctionV2({ contractId, methodName, args, parse, stringify, jsContract, blockQuery });\n        });\n    }\n    viewFunctionV2({ contractId, methodName, args, parse = parseJsonFromRawResponse, stringify = bytesJsonStringify, jsContract = false, blockQuery = { finality: 'optimistic' } }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let encodedArgs;\n            this.validateArgs(args);\n            if (jsContract) {\n                encodedArgs = this.encodeJSContractArgs(contractId, methodName, Object.keys(args).length > 0 ? JSON.stringify(args) : '');\n            }\n            else {\n                encodedArgs = stringify(args);\n            }\n            const result = yield this.connection.provider.query(Object.assign(Object.assign({ request_type: 'call_function' }, blockQuery), { account_id: jsContract ? this.connection.jsvmAccountId : contractId, method_name: jsContract ? 'view_js_contract' : methodName, args_base64: encodedArgs.toString('base64') }));\n            if (result.logs) {\n                this.printLogs(contractId, result.logs);\n            }\n            return result.result && result.result.length > 0 && parse(Buffer.from(result.result));\n        });\n    }\n    /**\n     * Returns the state (key value pairs) of this account's contract based on the key prefix.\n     * Pass an empty string for prefix if you would like to return the entire state.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-contract-state}\n     *\n     * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n     * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     */\n    viewState(prefix, blockQuery = { finality: 'optimistic' }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { values } = yield this.connection.provider.query(Object.assign(Object.assign({ request_type: 'view_state' }, blockQuery), { account_id: this.accountId, prefix_base64: Buffer.from(prefix).toString('base64') }));\n            return values.map(({ key, value }) => ({\n                key: Buffer.from(key, 'base64'),\n                value: Buffer.from(value, 'base64')\n            }));\n        });\n    }\n    /**\n     * Get all access keys for the account\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-access-key-list}\n     */\n    getAccessKeys() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.connection.provider.query({\n                request_type: 'view_access_key_list',\n                account_id: this.accountId,\n                finality: 'optimistic'\n            });\n            // A breaking API change introduced extra information into the\n            // response, so it now returns an object with a `keys` field instead\n            // of an array: https://github.com/nearprotocol/nearcore/pull/1789\n            if (Array.isArray(response)) {\n                return response;\n            }\n            return response.keys;\n        });\n    }\n    /**\n     * Returns a list of authorized apps\n     * @todo update the response value to return all the different keys, not just app keys.\n     */\n    getAccountDetails() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: update the response value to return all the different keys, not just app keys.\n            // Also if we need this function, or getAccessKeys is good enough.\n            const accessKeys = yield this.getAccessKeys();\n            const authorizedApps = accessKeys\n                .filter(item => item.access_key.permission !== 'FullAccess')\n                .map(item => {\n                const perm = item.access_key.permission;\n                return {\n                    contractId: perm.FunctionCall.receiver_id,\n                    amount: perm.FunctionCall.allowance,\n                    publicKey: item.public_key,\n                };\n            });\n            return { authorizedApps };\n        });\n    }\n    /**\n     * Returns calculated account balance\n     */\n    getAccountBalance() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const protocolConfig = yield this.connection.provider.experimental_protocolConfig({ finality: 'final' });\n            const state = yield this.state();\n            const costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);\n            const stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);\n            const staked = new bn_js_1.default(state.locked);\n            const totalBalance = new bn_js_1.default(state.amount).add(staked);\n            const availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));\n            return {\n                total: totalBalance.toString(),\n                stateStaked: stateStaked.toString(),\n                staked: staked.toString(),\n                available: availableBalance.toString()\n            };\n        });\n    }\n}\nexports.Account = Account;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}