{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\n\nconst provider_1 = require(\"./provider\");\n\nconst web_1 = require(\"../utils/web\");\n\nconst errors_1 = require(\"../utils/errors\");\n\nObject.defineProperty(exports, \"TypedError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.TypedError;\n  }\n});\nObject.defineProperty(exports, \"ErrorContext\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.ErrorContext;\n  }\n});\n\nconst borsh_1 = require(\"borsh\");\n\nconst exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\n\nconst rpc_errors_1 = require(\"../utils/rpc_errors\"); // Default number of retries before giving up on a request.\n\n\nconst REQUEST_RETRY_NUMBER = 12; // Default wait until next retry in millis.\n\nconst REQUEST_RETRY_WAIT = 500; // Exponential back off for waiting to retry.\n\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5; /// Keep ids unique across all connections.\n\nlet _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\n\nclass JsonRpcProvider extends provider_1.Provider {\n  /**\n   * @param connectionInfo Connection info\n   */\n  constructor(connectionInfo) {\n    super();\n    this.connection = connectionInfo || {\n      url: ''\n    };\n  }\n  /**\n   * Gets the RPC's status\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n   */\n\n\n  status() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.sendJsonRpc('status', []);\n    });\n  }\n  /**\n   * Sends a signed transaction to the RPC and waits until transaction is fully complete\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n   *\n   * @param signedTransaction The signed transaction being sent\n   */\n\n\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const bytes = signedTransaction.encode();\n      return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);\n    });\n  }\n  /**\n   * Sends a signed transaction to the RPC and immediately returns transaction hash\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n   * @param signedTransaction The signed transaction being sent\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  sendTransactionAsync(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const bytes = signedTransaction.encode();\n      return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);\n    });\n  }\n  /**\n   * Gets a transaction's status from the RPC\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n   *\n   * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n   * @param accountId The NEAR account that signed the transaction\n   */\n\n\n  txStatus(txHash, accountId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof txHash === 'string') {\n        return this.txStatusString(txHash, accountId);\n      } else {\n        return this.txStatusUint8Array(txHash, accountId);\n      }\n    });\n  }\n\n  txStatusUint8Array(txHash, accountId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.sendJsonRpc('tx', [(0, borsh_1.baseEncode)(txHash), accountId]);\n    });\n  }\n\n  txStatusString(txHash, accountId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.sendJsonRpc('tx', [txHash, accountId]);\n    });\n  }\n  /**\n   * Gets a transaction's status from the RPC with receipts\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n   * @param txHash The hash of the transaction\n   * @param accountId The NEAR account that signed the transaction\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  txStatusReceipts(txHash, accountId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof txHash === 'string') {\n        return this.sendJsonRpc('EXPERIMENTAL_tx_status', [txHash, accountId]);\n      } else {\n        return this.sendJsonRpc('EXPERIMENTAL_tx_status', [(0, borsh_1.baseEncode)(txHash), accountId]);\n      }\n    });\n  }\n  /**\n   * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n   * Query the RPC by passing an {@link RpcQueryRequest}\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n   *\n   * @typeParam T the shape of the returned query response\n   */\n\n\n  query() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let result;\n\n      if (args.length === 1) {\n        const _a = args[0],\n              {\n          block_id,\n          blockId\n        } = _a,\n              otherParams = __rest(_a, [\"block_id\", \"blockId\"]);\n\n        result = yield this.sendJsonRpc('query', Object.assign(Object.assign({}, otherParams), {\n          block_id: block_id || blockId\n        }));\n      } else {\n        const [path, data] = args;\n        result = yield this.sendJsonRpc('query', [path, data]);\n      }\n\n      if (result && result.error) {\n        throw new errors_1.TypedError(`Querying failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, result.error.name);\n      }\n\n      return result;\n    });\n  }\n  /**\n   * Query for block info from the RPC\n   * pass block_id OR finality as blockQuery, not both\n   * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n   *\n   * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n   */\n\n\n  block(blockQuery) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return this.sendJsonRpc('block', {\n        block_id: blockId,\n        finality\n      });\n    });\n  }\n  /**\n   * Query changes in block from the RPC\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n   */\n\n\n  blockChanges(blockQuery) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', {\n        block_id: blockId,\n        finality\n      });\n    });\n  }\n  /**\n   * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n   * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n   *\n   * @param chunkId Hash of a chunk ID or shard ID\n   */\n\n\n  chunk(chunkId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.sendJsonRpc('chunk', [chunkId]);\n    });\n  }\n  /**\n   * Query validators of the epoch defined by the given block id.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n   *\n   * @param blockId Block hash or height, or null for latest.\n   */\n\n\n  validators(blockId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.sendJsonRpc('validators', [blockId]);\n    });\n  }\n  /**\n   * Gets the protocol config at a block from RPC\n   * @see {@link }\n   *\n   * @param blockReference specifies the block to get the protocol config for\n   */\n\n\n  experimental_protocolConfig(blockReference) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n    });\n  }\n  /**\n   * Gets a light client execution proof for verifying execution outcomes\n   * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n   */\n\n\n  lightClientProof(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n    });\n  }\n  /**\n   * Gets access key changes for a given array of accountIds\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  accessKeyChanges(accountIdArray, blockQuery) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return this.sendJsonRpc('EXPERIMENTAL_changes', {\n        changes_type: 'all_access_key_changes',\n        account_ids: accountIdArray,\n        block_id: blockId,\n        finality\n      });\n    });\n  }\n  /**\n   * Gets single access key changes for a given array of access keys\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  singleAccessKeyChanges(accessKeyArray, blockQuery) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return this.sendJsonRpc('EXPERIMENTAL_changes', {\n        changes_type: 'single_access_key_changes',\n        keys: accessKeyArray,\n        block_id: blockId,\n        finality\n      });\n    });\n  }\n  /**\n   * Gets account changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  accountChanges(accountIdArray, blockQuery) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return this.sendJsonRpc('EXPERIMENTAL_changes', {\n        changes_type: 'account_changes',\n        account_ids: accountIdArray,\n        block_id: blockId,\n        finality\n      });\n    });\n  }\n  /**\n   * Gets contract state changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * Note: If you pass a keyPrefix it must be base64 encoded\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  contractStateChanges(accountIdArray, blockQuery) {\n    let keyPrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return this.sendJsonRpc('EXPERIMENTAL_changes', {\n        changes_type: 'data_changes',\n        account_ids: accountIdArray,\n        key_prefix_base64: keyPrefix,\n        block_id: blockId,\n        finality\n      });\n    });\n  }\n  /**\n   * Gets contract code changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * Note: Change is returned in a base64 encoded WASM file\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  contractCodeChanges(accountIdArray, blockQuery) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return this.sendJsonRpc('EXPERIMENTAL_changes', {\n        changes_type: 'contract_code_changes',\n        account_ids: accountIdArray,\n        block_id: blockId,\n        finality\n      });\n    });\n  }\n  /**\n   * Returns gas price for a specific block_height or block_hash.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n   *\n   * @param blockId Block hash or height, or null for latest.\n   */\n\n\n  gasPrice(blockId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.sendJsonRpc('gas_price', [blockId]);\n    });\n  }\n  /**\n   * Directly call the RPC specifying the method and params\n   *\n   * @param method RPC method\n   * @param params Parameters to the method\n   */\n\n\n  sendJsonRpc(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield (0, exponential_backoff_1.default)(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, () => __awaiter(this, void 0, void 0, function* () {\n        try {\n          const request = {\n            method,\n            params,\n            id: _nextId++,\n            jsonrpc: '2.0'\n          };\n          const response = yield (0, web_1.fetchJson)(this.connection, JSON.stringify(request));\n\n          if (response.error) {\n            if (typeof response.error.data === 'object') {\n              if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n                // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n              }\n\n              throw (0, rpc_errors_1.parseRpcError)(response.error.data);\n            } else {\n              const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`; // NOTE: All this hackery is happening because structured errors not implemented\n              // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n\n              if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error') || errorMessage.includes('query has timed out')) {\n                throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n              }\n\n              throw new errors_1.TypedError(errorMessage, response.error.name);\n            }\n          } // Success when response.error is not exist\n\n\n          return response;\n        } catch (error) {\n          if (error.type === 'TimeoutError') {\n            if (!process.env['NEAR_NO_LOGS']) {\n              console.warn(`Retrying request to ${method} as it has timed out`, params);\n            }\n\n            return null;\n          }\n\n          throw error;\n        }\n      }));\n      const {\n        result\n      } = response; // From jsonrpc spec:\n      // result\n      //   This member is REQUIRED on success.\n      //   This member MUST NOT exist if there was an error invoking the method.\n\n      if (typeof result === 'undefined') {\n        throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');\n      }\n\n      return result;\n    });\n  }\n\n}\n\nexports.JsonRpcProvider = JsonRpcProvider;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__rest","s","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__importDefault","mod","__esModule","defineProperty","exports","JsonRpcProvider","ErrorContext","TypedError","provider_1","require","web_1","errors_1","enumerable","get","borsh_1","exponential_backoff_1","rpc_errors_1","REQUEST_RETRY_NUMBER","REQUEST_RETRY_WAIT","REQUEST_RETRY_WAIT_BACKOFF","_nextId","Provider","constructor","connectionInfo","connection","url","status","sendJsonRpc","sendTransaction","signedTransaction","bytes","encode","Buffer","from","toString","sendTransactionAsync","txStatus","txHash","accountId","txStatusString","txStatusUint8Array","baseEncode","txStatusReceipts","query","args","_a","block_id","blockId","otherParams","assign","path","data","error","JSON","stringify","name","block","blockQuery","finality","blockChanges","chunk","chunkId","validators","experimental_protocolConfig","blockReference","lightClientProof","request","accessKeyChanges","accountIdArray","changes_type","account_ids","singleAccessKeyChanges","accessKeyArray","keys","accountChanges","contractStateChanges","keyPrefix","key_prefix_base64","contractCodeChanges","gasPrice","method","params","response","default","id","jsonrpc","fetchJson","error_message","error_type","parseRpcError","errorMessage","code","message","includes","type","process","env","console","warn"],"sources":["/Users/loyanix/projects/smart-hamster-web-app/node_modules/near-api-js/lib/providers/json-rpc-provider.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\nconst provider_1 = require(\"./provider\");\nconst web_1 = require(\"../utils/web\");\nconst errors_1 = require(\"../utils/errors\");\nObject.defineProperty(exports, \"TypedError\", { enumerable: true, get: function () { return errors_1.TypedError; } });\nObject.defineProperty(exports, \"ErrorContext\", { enumerable: true, get: function () { return errors_1.ErrorContext; } });\nconst borsh_1 = require(\"borsh\");\nconst exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\nconst rpc_errors_1 = require(\"../utils/rpc_errors\");\n// Default number of retries before giving up on a request.\nconst REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nlet _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\nclass JsonRpcProvider extends provider_1.Provider {\n    /**\n     * @param connectionInfo Connection info\n     */\n    constructor(connectionInfo) {\n        super();\n        this.connection = connectionInfo || { url: '' };\n    }\n    /**\n     * Gets the RPC's status\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n     */\n    status() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.sendJsonRpc('status', []);\n        });\n    }\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n     *\n     * @param signedTransaction The signed transaction being sent\n     */\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const bytes = signedTransaction.encode();\n            return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);\n        });\n    }\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    sendTransactionAsync(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const bytes = signedTransaction.encode();\n            return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);\n        });\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */\n    txStatus(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof txHash === 'string') {\n                return this.txStatusString(txHash, accountId);\n            }\n            else {\n                return this.txStatusUint8Array(txHash, accountId);\n            }\n        });\n    }\n    txStatusUint8Array(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.sendJsonRpc('tx', [(0, borsh_1.baseEncode)(txHash), accountId]);\n        });\n    }\n    txStatusString(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.sendJsonRpc('tx', [txHash, accountId]);\n        });\n    }\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    txStatusReceipts(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof txHash === 'string') {\n                return this.sendJsonRpc('EXPERIMENTAL_tx_status', [txHash, accountId]);\n            }\n            else {\n                return this.sendJsonRpc('EXPERIMENTAL_tx_status', [(0, borsh_1.baseEncode)(txHash), accountId]);\n            }\n        });\n    }\n    /**\n     * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n     * Query the RPC by passing an {@link RpcQueryRequest}\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n     *\n     * @typeParam T the shape of the returned query response\n     */\n    query(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let result;\n            if (args.length === 1) {\n                const _a = args[0], { block_id, blockId } = _a, otherParams = __rest(_a, [\"block_id\", \"blockId\"]);\n                result = yield this.sendJsonRpc('query', Object.assign(Object.assign({}, otherParams), { block_id: block_id || blockId }));\n            }\n            else {\n                const [path, data] = args;\n                result = yield this.sendJsonRpc('query', [path, data]);\n            }\n            if (result && result.error) {\n                throw new errors_1.TypedError(`Querying failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, result.error.name);\n            }\n            return result;\n        });\n    }\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n     *\n     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n     */\n    block(blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('block', { block_id: blockId, finality });\n        });\n    }\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n     */\n    blockChanges(blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', { block_id: blockId, finality });\n        });\n    }\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */\n    chunk(chunkId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.sendJsonRpc('chunk', [chunkId]);\n        });\n    }\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    validators(blockId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.sendJsonRpc('validators', [blockId]);\n        });\n    }\n    /**\n     * Gets the protocol config at a block from RPC\n     * @see {@link }\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */\n    experimental_protocolConfig(blockReference) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n        });\n    }\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n     */\n    lightClientProof(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n        });\n    }\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */\n    accessKeyChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes', {\n                changes_type: 'all_access_key_changes',\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */\n    singleAccessKeyChanges(accessKeyArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes', {\n                changes_type: 'single_access_key_changes',\n                keys: accessKeyArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    accountChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes', {\n                changes_type: 'account_changes',\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes', {\n                changes_type: 'data_changes',\n                account_ids: accountIdArray,\n                key_prefix_base64: keyPrefix,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    contractCodeChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc('EXPERIMENTAL_changes', {\n                changes_type: 'contract_code_changes',\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    gasPrice(blockId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.sendJsonRpc('gas_price', [blockId]);\n        });\n    }\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */\n    sendJsonRpc(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield (0, exponential_backoff_1.default)(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    const request = {\n                        method,\n                        params,\n                        id: (_nextId++),\n                        jsonrpc: '2.0'\n                    };\n                    const response = yield (0, web_1.fetchJson)(this.connection, JSON.stringify(request));\n                    if (response.error) {\n                        if (typeof response.error.data === 'object') {\n                            if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n                                // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                                throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n                            }\n                            throw (0, rpc_errors_1.parseRpcError)(response.error.data);\n                        }\n                        else {\n                            const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;\n                            // NOTE: All this hackery is happening because structured errors not implemented\n                            // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                            if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error')\n                                || errorMessage.includes('query has timed out')) {\n                                throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n                            }\n                            throw new errors_1.TypedError(errorMessage, response.error.name);\n                        }\n                    }\n                    // Success when response.error is not exist\n                    return response;\n                }\n                catch (error) {\n                    if (error.type === 'TimeoutError') {\n                        if (!process.env['NEAR_NO_LOGS']) {\n                            console.warn(`Retrying request to ${method} as it has timed out`, params);\n                        }\n                        return null;\n                    }\n                    throw error;\n                }\n            }));\n            const { result } = response;\n            // From jsonrpc spec:\n            // result\n            //   This member is REQUIRED on success.\n            //   This member MUST NOT exist if there was an error invoking the method.\n            if (typeof result === 'undefined') {\n                throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');\n            }\n            return result;\n        });\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}