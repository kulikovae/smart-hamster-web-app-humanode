{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergeKeyStore = void 0;\n\nconst keystore_1 = require(\"./keystore\");\n\nclass MergeKeyStore extends keystore_1.KeyStore {\n  /**\n   * @param keyStores read calls are attempted from start to end of array\n   * @param options.writeKeyStoreIndex the keystore index that will receive all write calls\n   */\n  constructor(keyStores) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      writeKeyStoreIndex: 0\n    };\n    super();\n    this.options = options;\n    this.keyStores = keyStores;\n  }\n  /**\n   * Store a {@link KeyPain} to the first index of a key store array\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n\n\n  setKey(networkId, accountId, keyPair) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);\n    });\n  }\n  /**\n   * Gets a {@link KeyPair} from the array of key stores\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @returns {Promise<KeyPair>}\n   */\n\n\n  getKey(networkId, accountId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (const keyStore of this.keyStores) {\n        const keyPair = yield keyStore.getKey(networkId, accountId);\n\n        if (keyPair) {\n          return keyPair;\n        }\n      }\n\n      return null;\n    });\n  }\n  /**\n   * Removes a {@link KeyPair} from the array of key stores\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   */\n\n\n  removeKey(networkId, accountId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (const keyStore of this.keyStores) {\n        yield keyStore.removeKey(networkId, accountId);\n      }\n    });\n  }\n  /**\n   * Removes all items from each key store\n   */\n\n\n  clear() {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (const keyStore of this.keyStores) {\n        yield keyStore.clear();\n      }\n    });\n  }\n  /**\n   * Get the network(s) from the array of key stores\n   * @returns {Promise<string[]>}\n   */\n\n\n  getNetworks() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = new Set();\n\n      for (const keyStore of this.keyStores) {\n        for (const network of yield keyStore.getNetworks()) {\n          result.add(network);\n        }\n      }\n\n      return Array.from(result);\n    });\n  }\n  /**\n   * Gets the account(s) from the array of key stores\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns{Promise<string[]>}\n   */\n\n\n  getAccounts(networkId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = new Set();\n\n      for (const keyStore of this.keyStores) {\n        for (const account of yield keyStore.getAccounts(networkId)) {\n          result.add(account);\n        }\n      }\n\n      return Array.from(result);\n    });\n  }\n  /** @hidden */\n\n\n  toString() {\n    return `MergeKeyStore(${this.keyStores.join(', ')})`;\n  }\n\n}\n\nexports.MergeKeyStore = MergeKeyStore;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","MergeKeyStore","keystore_1","require","KeyStore","constructor","keyStores","options","writeKeyStoreIndex","setKey","networkId","accountId","keyPair","getKey","keyStore","removeKey","clear","getNetworks","Set","network","add","Array","from","getAccounts","account","toString","join"],"sources":["/Users/loyanix/projects/smart-hamster-web-app/node_modules/near-api-js/lib/key_stores/merge_key_store.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MergeKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nclass MergeKeyStore extends keystore_1.KeyStore {\n    /**\n     * @param keyStores read calls are attempted from start to end of array\n     * @param options.writeKeyStoreIndex the keystore index that will receive all write calls\n     */\n    constructor(keyStores, options = { writeKeyStoreIndex: 0 }) {\n        super();\n        this.options = options;\n        this.keyStores = keyStores;\n    }\n    /**\n     * Store a {@link KeyPain} to the first index of a key store array\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    setKey(networkId, accountId, keyPair) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);\n        });\n    }\n    /**\n     * Gets a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    getKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const keyStore of this.keyStores) {\n                const keyPair = yield keyStore.getKey(networkId, accountId);\n                if (keyPair) {\n                    return keyPair;\n                }\n            }\n            return null;\n        });\n    }\n    /**\n     * Removes a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    removeKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const keyStore of this.keyStores) {\n                yield keyStore.removeKey(networkId, accountId);\n            }\n        });\n    }\n    /**\n     * Removes all items from each key store\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const keyStore of this.keyStores) {\n                yield keyStore.clear();\n            }\n        });\n    }\n    /**\n     * Get the network(s) from the array of key stores\n     * @returns {Promise<string[]>}\n     */\n    getNetworks() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = new Set();\n            for (const keyStore of this.keyStores) {\n                for (const network of yield keyStore.getNetworks()) {\n                    result.add(network);\n                }\n            }\n            return Array.from(result);\n        });\n    }\n    /**\n     * Gets the account(s) from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    getAccounts(networkId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = new Set();\n            for (const keyStore of this.keyStores) {\n                for (const account of yield keyStore.getAccounts(networkId)) {\n                    result.add(account);\n                }\n            }\n            return Array.from(result);\n        });\n    }\n    /** @hidden */\n    toString() {\n        return `MergeKeyStore(${this.keyStores.join(', ')})`;\n    }\n}\nexports.MergeKeyStore = MergeKeyStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}