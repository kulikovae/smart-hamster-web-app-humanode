{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemorySigner = exports.Signer = void 0;\n\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\n\nconst key_pair_1 = require(\"./utils/key_pair\");\n\nconst in_memory_key_store_1 = require(\"./key_stores/in_memory_key_store\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\n\n\nclass Signer {}\n\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\n\nclass InMemorySigner extends Signer {\n  constructor(keyStore) {\n    super();\n    this.keyStore = keyStore;\n  }\n  /**\n   * Creates a single account Signer instance with account, network and keyPair provided.\n   *\n   * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).\n   *\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account to assign the key pair to\n   * @param keyPair The keyPair to use for signing\n   */\n\n\n  static fromKeyPair(networkId, accountId, keyPair) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const keyStore = new in_memory_key_store_1.InMemoryKeyStore();\n      yield keyStore.setKey(networkId, accountId, keyPair);\n      return new InMemorySigner(keyStore);\n    });\n  }\n  /**\n   * Creates a public key for the account given\n   * @param accountId The NEAR account to assign a public key to\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns {Promise<PublicKey>}\n   */\n\n\n  createKey(accountId, networkId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n      yield this.keyStore.setKey(networkId, accountId, keyPair);\n      return keyPair.getPublicKey();\n    });\n  }\n  /**\n   * Gets the existing public key for a given account\n   * @param accountId The NEAR account to assign a public key to\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns {Promise<PublicKey>} Returns the public key or null if not found\n   */\n\n\n  getPublicKey(accountId, networkId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const keyPair = yield this.keyStore.getKey(networkId, accountId);\n\n      if (keyPair === null) {\n        return null;\n      }\n\n      return keyPair.getPublicKey();\n    });\n  }\n  /**\n   * @param message A message to be signed, typically a serialized transaction\n   * @param accountId the NEAR account signing the message\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns {Promise<Signature>}\n   */\n\n\n  signMessage(message, accountId, networkId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n\n      if (!accountId) {\n        throw new Error('InMemorySigner requires provided account id');\n      }\n\n      const keyPair = yield this.keyStore.getKey(networkId, accountId);\n\n      if (keyPair === null) {\n        throw new Error(`Key for ${accountId} not found in ${networkId}`);\n      }\n\n      return keyPair.sign(hash);\n    });\n  }\n\n  toString() {\n    return `InMemorySigner(${this.keyStore})`;\n  }\n\n}\n\nexports.InMemorySigner = InMemorySigner;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","InMemorySigner","Signer","js_sha256_1","require","key_pair_1","in_memory_key_store_1","constructor","keyStore","fromKeyPair","networkId","accountId","keyPair","InMemoryKeyStore","setKey","createKey","KeyPair","fromRandom","getPublicKey","getKey","signMessage","message","hash","Uint8Array","default","sha256","array","Error","sign","toString"],"sources":["/Users/loyanix/projects/smart-hamster-web-app/node_modules/near-api-js/lib/signer.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InMemorySigner = exports.Signer = void 0;\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst in_memory_key_store_1 = require(\"./key_stores/in_memory_key_store\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\nclass Signer {\n}\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\nclass InMemorySigner extends Signer {\n    constructor(keyStore) {\n        super();\n        this.keyStore = keyStore;\n    }\n    /**\n     * Creates a single account Signer instance with account, network and keyPair provided.\n     *\n     * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).\n     *\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account to assign the key pair to\n     * @param keyPair The keyPair to use for signing\n     */\n    static fromKeyPair(networkId, accountId, keyPair) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const keyStore = new in_memory_key_store_1.InMemoryKeyStore();\n            yield keyStore.setKey(networkId, accountId, keyPair);\n            return new InMemorySigner(keyStore);\n        });\n    }\n    /**\n     * Creates a public key for the account given\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>}\n     */\n    createKey(accountId, networkId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n            yield this.keyStore.setKey(networkId, accountId, keyPair);\n            return keyPair.getPublicKey();\n        });\n    }\n    /**\n     * Gets the existing public key for a given account\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>} Returns the public key or null if not found\n     */\n    getPublicKey(accountId, networkId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const keyPair = yield this.keyStore.getKey(networkId, accountId);\n            if (keyPair === null) {\n                return null;\n            }\n            return keyPair.getPublicKey();\n        });\n    }\n    /**\n     * @param message A message to be signed, typically a serialized transaction\n     * @param accountId the NEAR account signing the message\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<Signature>}\n     */\n    signMessage(message, accountId, networkId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n            if (!accountId) {\n                throw new Error('InMemorySigner requires provided account id');\n            }\n            const keyPair = yield this.keyStore.getKey(networkId, accountId);\n            if (keyPair === null) {\n                throw new Error(`Key for ${accountId} not found in ${networkId}`);\n            }\n            return keyPair.sign(hash);\n        });\n    }\n    toString() {\n        return `InMemorySigner(${this.keyStore})`;\n    }\n}\nexports.InMemorySigner = InMemorySigner;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}