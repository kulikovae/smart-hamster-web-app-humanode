{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemoryKeyStore = void 0;\n\nconst keystore_1 = require(\"./keystore\");\n\nconst key_pair_1 = require(\"../utils/key_pair\");\n/**\n * Simple in-memory keystore for mainly for testing purposes.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores, utils } from 'near-api-js';\n *\n * const privateKey = '.......';\n * const keyPair = utils.KeyPair.fromString(privateKey);\n *\n * const keyStore = new keyStores.InMemoryKeyStore();\n * keyStore.setKey('testnet', 'example-account.testnet', keyPair);\n *\n * const config = {\n *   keyStore, // instance of InMemoryKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\n\n\nclass InMemoryKeyStore extends keystore_1.KeyStore {\n  constructor() {\n    super();\n    this.keys = {};\n  }\n  /**\n   * Stores a {@KeyPair} in in-memory storage item\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n\n\n  setKey(networkId, accountId, keyPair) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.keys[`${accountId}:${networkId}`] = keyPair.toString();\n    });\n  }\n  /**\n   * Gets a {@link KeyPair} from in-memory storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @returns {Promise<KeyPair>}\n   */\n\n\n  getKey(networkId, accountId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const value = this.keys[`${accountId}:${networkId}`];\n\n      if (!value) {\n        return null;\n      }\n\n      return key_pair_1.KeyPair.fromString(value);\n    });\n  }\n  /**\n   * Removes a {@link KeyPair} from in-memory storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   */\n\n\n  removeKey(networkId, accountId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      delete this.keys[`${accountId}:${networkId}`];\n    });\n  }\n  /**\n   * Removes all {@link KeyPairs} from in-memory storage\n   */\n\n\n  clear() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.keys = {};\n    });\n  }\n  /**\n   * Get the network(s) from in-memory storage\n   * @returns {Promise<string[]>}\n   */\n\n\n  getNetworks() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = new Set();\n      Object.keys(this.keys).forEach(key => {\n        const parts = key.split(':');\n        result.add(parts[1]);\n      });\n      return Array.from(result.values());\n    });\n  }\n  /**\n   * Gets the account(s) from in-memory storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns{Promise<string[]>}\n   */\n\n\n  getAccounts(networkId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = new Array();\n      Object.keys(this.keys).forEach(key => {\n        const parts = key.split(':');\n\n        if (parts[parts.length - 1] === networkId) {\n          result.push(parts.slice(0, parts.length - 1).join(':'));\n        }\n      });\n      return result;\n    });\n  }\n  /** @hidden */\n\n\n  toString() {\n    return 'InMemoryKeyStore';\n  }\n\n}\n\nexports.InMemoryKeyStore = InMemoryKeyStore;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","InMemoryKeyStore","keystore_1","require","key_pair_1","KeyStore","constructor","keys","setKey","networkId","accountId","keyPair","toString","getKey","KeyPair","fromString","removeKey","clear","getNetworks","Set","forEach","key","parts","split","add","Array","from","values","getAccounts","length","push","slice","join"],"sources":["/Users/loyanix/projects/smart-hamster-web-app/node_modules/near-api-js/lib/key_stores/in_memory_key_store.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InMemoryKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nconst key_pair_1 = require(\"../utils/key_pair\");\n/**\n * Simple in-memory keystore for mainly for testing purposes.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores, utils } from 'near-api-js';\n *\n * const privateKey = '.......';\n * const keyPair = utils.KeyPair.fromString(privateKey);\n *\n * const keyStore = new keyStores.InMemoryKeyStore();\n * keyStore.setKey('testnet', 'example-account.testnet', keyPair);\n *\n * const config = {\n *   keyStore, // instance of InMemoryKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nclass InMemoryKeyStore extends keystore_1.KeyStore {\n    constructor() {\n        super();\n        this.keys = {};\n    }\n    /**\n     * Stores a {@KeyPair} in in-memory storage item\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    setKey(networkId, accountId, keyPair) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.keys[`${accountId}:${networkId}`] = keyPair.toString();\n        });\n    }\n    /**\n     * Gets a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    getKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = this.keys[`${accountId}:${networkId}`];\n            if (!value) {\n                return null;\n            }\n            return key_pair_1.KeyPair.fromString(value);\n        });\n    }\n    /**\n     * Removes a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    removeKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            delete this.keys[`${accountId}:${networkId}`];\n        });\n    }\n    /**\n     * Removes all {@link KeyPairs} from in-memory storage\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.keys = {};\n        });\n    }\n    /**\n     * Get the network(s) from in-memory storage\n     * @returns {Promise<string[]>}\n     */\n    getNetworks() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = new Set();\n            Object.keys(this.keys).forEach((key) => {\n                const parts = key.split(':');\n                result.add(parts[1]);\n            });\n            return Array.from(result.values());\n        });\n    }\n    /**\n     * Gets the account(s) from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    getAccounts(networkId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = new Array();\n            Object.keys(this.keys).forEach((key) => {\n                const parts = key.split(':');\n                if (parts[parts.length - 1] === networkId) {\n                    result.push(parts.slice(0, parts.length - 1).join(':'));\n                }\n            });\n            return result;\n        });\n    }\n    /** @hidden */\n    toString() {\n        return 'InMemoryKeyStore';\n    }\n}\nexports.InMemoryKeyStore = InMemoryKeyStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}